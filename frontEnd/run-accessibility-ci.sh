#!/bin/bash

# Script pour pr√©parer et ex√©cuter les tests d'accessibilit√© en CI
# Usage: ./run-accessibility-ci.sh [browser] [test-file]

set -e

# Configuration par d√©faut
BROWSER=${1:-"chromium"}
TEST_FILE=${2:-""}
CI_MODE=true

echo "üîç Pr√©paration des tests d'accessibilit√© en CI"
echo "üìÖ Date: $(date)"
echo "üåê Navigateur: $BROWSER"
echo "üìÅ Fichier de test: ${TEST_FILE:-"Tous les tests"}"
echo ""

# V√©rifier les d√©pendances
echo "üì¶ V√©rification des d√©pendances..."
if [ ! -d "node_modules" ]; then
    echo "‚ùå node_modules manquant. Installez les d√©pendances avec: npm ci"
    exit 1
fi

if [ ! -d "node_modules/@playwright" ]; then
    echo "‚ùå Playwright non install√©. Installez avec: npm ci"
    exit 1
fi

# V√©rifier la build
echo "üèóÔ∏è V√©rification de la build..."
if [ ! -d "build" ]; then
    echo "‚ö†Ô∏è Dossier build manquant. Construction de l'application..."
    npm run build
fi

# Pr√©parer l'environnement CI
echo "üîß Configuration de l'environnement CI..."
export CI=true
export PWTEST_HTML_REPORT_OPEN=never
export PLAYWRIGHT_HTML_REPORT=accessibility-report

# Cr√©er les dossiers de rapport
mkdir -p accessibility-report test-results

echo "üß™ Ex√©cution des tests d'accessibilit√©..."

# Construire la commande
COMMAND="npx playwright test --config=e2e/accessibility.config.ts"

if [ -n "$TEST_FILE" ]; then
    COMMAND="$COMMAND accessibility/$TEST_FILE"
fi

if [ "$BROWSER" != "all" ]; then
    COMMAND="$COMMAND --project=accessibility-$BROWSER"
fi

# Options CI
COMMAND="$COMMAND --reporter=html,json --output-dir=test-results"

echo "üìù Commande ex√©cut√©e: $COMMAND"
echo ""

# Ex√©cuter les tests (ne pas √©chouer le script si les tests √©chouent)
set +e
eval $COMMAND
TEST_EXIT_CODE=$?
set -e

echo ""
echo "üìä G√©n√©ration du r√©sum√©..."

# G√©n√©rer un r√©sum√© des r√©sultats
if [ -f "accessibility-results.json" ]; then
    # Utiliser jq pour parser le JSON si disponible, sinon grep/sed
    if command -v jq &> /dev/null; then
        TOTAL=$(jq -r '.stats.total // 0' accessibility-results.json)
        PASSED=$(jq -r '.stats.expected // 0' accessibility-results.json)
        FAILED=$(jq -r '.stats.unexpected // 0' accessibility-results.json)
        SKIPPED=$(jq -r '.stats.skipped // 0' accessibility-results.json)
    else
        # Fallback sans jq
        TOTAL=$(grep -o '"total":[0-9]*' accessibility-results.json | cut -d: -f2 || echo "0")
        PASSED=$(grep -o '"expected":[0-9]*' accessibility-results.json | cut -d: -f2 || echo "0")
        FAILED=$(grep -o '"unexpected":[0-9]*' accessibility-results.json | cut -d: -f2 || echo "0")
        SKIPPED=$(grep -o '"skipped":[0-9]*' accessibility-results.json | cut -d: -f2 || echo "0")
    fi
    
    echo "üìà R√©sultats des tests d'accessibilit√©:"
    echo "   Total: $TOTAL"
    echo "   R√©ussis: $PASSED"
    echo "   √âchou√©s: $FAILED"
    echo "   Ignor√©s: $SKIPPED"
    
    if [ "$TOTAL" -gt 0 ]; then
        SUCCESS_RATE=$((PASSED * 100 / TOTAL))
        echo "   Taux de r√©ussite: ${SUCCESS_RATE}%"
        
        if [ "$SUCCESS_RATE" -ge 90 ]; then
            echo "‚úÖ Excellent niveau d'accessibilit√© !"
        elif [ "$SUCCESS_RATE" -ge 70 ]; then
            echo "üü° Bon niveau d'accessibilit√©, am√©liorations possibles"
        else
            echo "üî¥ Niveau d'accessibilit√© insuffisant, corrections n√©cessaires"
        fi
    fi
else
    echo "‚ùå Fichier de r√©sultats non trouv√©"
fi

echo ""
echo "üìÅ Artefacts g√©n√©r√©s:"
[ -d "accessibility-report" ] && echo "   - Rapport HTML: accessibility-report/"
[ -f "accessibility-results.json" ] && echo "   - R√©sultats JSON: accessibility-results.json"
[ -d "test-results" ] && echo "   - R√©sultats d√©taill√©s: test-results/"

echo ""
if [ $TEST_EXIT_CODE -eq 0 ]; then
    echo "‚úÖ Tests d'accessibilit√© termin√©s avec succ√®s !"
    exit 0
else
    echo "‚ö†Ô∏è Tests d'accessibilit√© termin√©s avec des √©checs (code: $TEST_EXIT_CODE)"
    echo "üí° En mode CI non-bloquant, ceci est informatif et n'interrompt pas le pipeline"
    
    # En mode CI, on retourne 0 pour ne pas bloquer
    if [ "$CI_MODE" = "true" ]; then
        echo "üîÑ Mode CI non-bloquant activ√© - pipeline continue"
        exit 0
    else
        exit $TEST_EXIT_CODE
    fi
fi
