services:
  postgres:
    image: postgres:16
    container_name: epicmapping-postgres
    environment:
      POSTGRES_DB: EPICMAPPING
      POSTGRES_USER: epicmapping_user
      POSTGRES_PASSWORD: epicmapping_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - epicmapping-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U epicmapping_user -d EPICMAPPING"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: epicmapping-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@epicmapping.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8082:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - epicmapping-network
    depends_on:
      - postgres
    restart: unless-stopped

  web-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: epicmapping-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=EPICMAPPING;Username=epicmapping_user;Password=epicmapping_password;Port=5432
      - JWT_SECRET_KEY=CECI_EST_UNE_CLE_SECRETE_POUR_JWT_AU_MOINS_32_CARACTERES_LONG
    ports:
      - "8080:8080"
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - epicmapping-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/api/Database/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s

volumes:
  postgres_data:
  pgadmin_data:

networks:
  epicmapping-network:
    driver: bridge
