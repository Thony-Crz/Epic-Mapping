#!/bin/bash

# Script de d√©marrage de d√©veloppement pour Epic Mapping
# Ce script d√©marre l'ensemble de la stack (Backend + Frontend)

set -e  # Arr√™ter le script en cas d'erreur

echo "üöÄ D√©marrage de l'environnement de d√©veloppement Epic Mapping..."

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages color√©s
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Obtenir le r√©pertoire racine du projet
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
BACKEND_DIR="$PROJECT_ROOT/backEnd"
FRONTEND_DIR="$PROJECT_ROOT/frontEnd"

# V√©rifier si Docker est en cours d'ex√©cution
if ! docker info >/dev/null 2>&1; then
    log_error "Docker n'est pas en cours d'ex√©cution. Veuillez d√©marrer Docker."
    exit 1
fi

log_success "Docker est en cours d'ex√©cution"

# Nettoyer les conteneurs existants pour √©viter les conflits de r√©seau
log_info "Nettoyage des conteneurs existants..."
docker container rm -f epicmapping-api epicmapping-postgres epicmapping-pgadmin epicmapping-api-new 2>/dev/null || true

# Nettoyer les r√©seaux orphelins
log_info "Nettoyage des r√©seaux orphelins..."
docker network rm backend_epicmapping-network 2>/dev/null || true

log_success "Nettoyage termin√©"

# Cr√©er le r√©seau
log_info "Cr√©ation du r√©seau..."
docker network create backend_epicmapping-network 2>/dev/null || true

# D√©marrer PostgreSQL
log_info "D√©marrage de PostgreSQL..."
docker run -d \
  --name epicmapping-postgres \
  --network backend_epicmapping-network \
  -p 5432:5432 \
  -e POSTGRES_DB=EPICMAPPING \
  -e POSTGRES_USER=epicmapping_user \
  -e POSTGRES_PASSWORD=epicmapping_password \
  postgres:16

# Attendre que PostgreSQL soit pr√™t
log_info "Attente du d√©marrage de PostgreSQL..."
max_attempts=30
attempt=0

while [ $attempt -lt $max_attempts ]; do
    if docker exec epicmapping-postgres pg_isready -U epicmapping_user -d EPICMAPPING >/dev/null 2>&1; then
        log_success "PostgreSQL est pr√™t"
        break
    fi
    
    attempt=$((attempt + 1))
    echo -n "."
    sleep 2
done

if [ $attempt -eq $max_attempts ]; then
    log_error "PostgreSQL n'a pas d√©marr√© dans les temps"
    exit 1
fi

# Construire l'image API
log_info "Construction de l'image API..."
cd "$BACKEND_DIR"
docker build -t epicmapping-api . >/dev/null 2>&1 || {
    log_error "√âchec de la construction de l'image API"
    exit 1
}

# D√©marrer l'API
log_info "D√©marrage de l'API..."
docker run -d \
  --name epicmapping-api \
  --network backend_epicmapping-network \
  -p 8080:8080 \
  -p 8081:8081 \
  -e "ASPNETCORE_ENVIRONMENT=Development" \
  -e "ConnectionStrings__DefaultConnection=Host=epicmapping-postgres;Database=EPICMAPPING;Username=epicmapping_user;Password=epicmapping_password;Port=5432" \
  -e "JWT_SECRET_KEY=CECI_EST_UNE_CLE_SECRETE_POUR_JWT_AU_MOINS_32_CARACTERES_LONG" \
  epicmapping-api

# Attendre que l'API soit pr√™te
log_info "Attente du d√©marrage de l'API..."
max_attempts=30
attempt=0

while [ $attempt -lt $max_attempts ]; do
    if curl -s http://localhost:8080/api/Database/health >/dev/null 2>&1; then
        log_success "API est pr√™te"
        break
    fi
    
    attempt=$((attempt + 1))
    echo -n "."
    sleep 2
done

if [ $attempt -eq $max_attempts ]; then
    log_warning "L'API n'a pas d√©marr√© dans les temps, mais continuons..."
fi

# Test de connectivit√© backend
log_info "Test de la connectivit√© de la base de donn√©es..."
response=$(curl -s http://localhost:8080/api/Database/health || echo "")

if echo "$response" | grep -q "Healthy"; then
    log_success "‚ú® Backend est op√©rationnel!"
    
    # D√©marrer le frontend
    log_info "D√©marrage du frontend..."
    
    # V√©rifier si Node.js est install√©
    if ! command -v npm >/dev/null 2>&1; then
        log_error "npm n'est pas install√©. Veuillez installer Node.js/npm pour d√©marrer le frontend."
        log_warning "Backend est op√©rationnel, mais le frontend ne peut pas d√©marrer."
        exit 0
    fi
    
    # Aller dans le dossier frontend
    cd "$FRONTEND_DIR" || {
        log_error "Impossible de trouver le dossier frontEnd"
        log_warning "Backend est op√©rationnel, mais le frontend ne peut pas d√©marrer."
        exit 0
    }
    
    # Installer les d√©pendances si n√©cessaire
    if [ ! -d "node_modules" ]; then
        log_info "Installation des d√©pendances npm..."
        npm install || {
            log_error "√âchec de l'installation des d√©pendances npm"
            log_warning "Backend est op√©rationnel, mais le frontend ne peut pas d√©marrer."
            exit 0
        }
    fi
    
    # D√©marrer le serveur de d√©veloppement en arri√®re-plan
    log_info "Lancement du serveur de d√©veloppement frontend..."
    nohup npm run dev > "$PROJECT_ROOT/frontend.log" 2>&1 &
    frontend_pid=$!
    
    # Attendre que le frontend soit pr√™t
    log_info "Attente du d√©marrage du frontend..."
    max_attempts=30
    attempt=0
    
    while [ $attempt -lt $max_attempts ]; do
        if curl -s http://localhost:5173 >/dev/null 2>&1; then
            log_success "Frontend est pr√™t!"
            break
        fi
        
        attempt=$((attempt + 1))
        echo -n "."
        sleep 2
    done
    
    if [ $attempt -eq $max_attempts ]; then
        log_warning "Le frontend n'a pas d√©marr√© dans les temps"
        log_info "V√©rifiez les logs dans $PROJECT_ROOT/frontend.log"
    fi
    
    echo ""
    log_success "üéâ Environnement de d√©veloppement op√©rationnel!"
    echo ""
    echo "üåê Services disponibles:"
    echo "   ‚Ä¢ üé® Frontend: http://localhost:5173"
    echo "   ‚Ä¢ üîß API: http://localhost:8080"
    echo "   ‚Ä¢ üè• Health Check: http://localhost:8080/api/Database/health"
    echo ""
    echo "üìù Logs:"
    echo "   ‚Ä¢ Frontend: tail -f $PROJECT_ROOT/frontend.log"
    echo "   ‚Ä¢ Backend: docker logs epicmapping-api"
    echo ""
    echo "üõë Pour arr√™ter tous les services:"
    echo "   ‚Ä¢ Utilisez: $PROJECT_ROOT/scripts/stop-dev.sh"
    echo ""
    
    # Sauvegarder le PID du frontend pour l'arr√™t
    echo "$frontend_pid" > "$PROJECT_ROOT/.frontend.pid"
    
else
    log_error "Probl√®me de connectivit√© d√©tect√© avec le backend"
    echo "R√©ponse de l'API: $response"
    exit 1
fi
